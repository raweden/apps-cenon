%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.0.1.
%%For: () ()
%%Title: (/user/georg/Projekte/Zenon/DTP/Ship/DemoFiles/ps/muecke_2.5mm.ai)
%%CreationDate: (12/1/93) (13:48)
%%BoundingBox: -94 -1 760 596
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 678 592
%AI3_DocumentPreview: Header
%%Template:
%%PageOrigin:30 31
%%AI3_PaperRect:0 623.6221 708.6614 0
%%AI3_Margin:30 31 30 31
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)

userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec

%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)

currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking

%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)

currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking

%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)

currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking

%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 1
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)

currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put

% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def

% paint operators
/cf	currentflat def	% - cf flatness

% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def

% typography operators
/Tx {} def
/Tj {} def

% compound path operators
/CRender {} def

% printing
/_AI3_savepage {} def

% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def

% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def

% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse

% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def

% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def

% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def

% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def

% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def

% locked object operator
/A					% value A -
{
pop
} def

currentdict readonly pop end
setpacking

% annotate page operator
/annotatepage
{
} def
%%EndResource
%AI3-Grid.0 3.5433 3.5433 3 0.833333 0.833333 0.833333 1
%%EndProlog
%%BeginSetup
Adobe_cmykcolor /initialize get exec

Adobe_cshow /initialize get exec

Adobe_customcolor /initialize get exec

Adobe_IllustratorA_AI3 /initialize get exec

%%EndSetup
0 A
u
0 O
0 g
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
-26.3085 17.1257 m
-35.1647 19.2464 -42.9398 28.3485 -42.5196 35.433 c
-29.0584 35.433 l
-29.0584 43.9347 l
-49.6044 43.9347 l
-55.2908 51.9345 -69.7451 60.7704 -75.4502 70.4877 c
-87.1989 90.4984 -82.8061 121.1948 -63.4619 137.202 c
-36.837 159.234 4.1659 155.0861 25.2867 147.3244 c
54.0454 136.7559 68.7452 115.3034 74.3943 93.4267 c
54.9077 87.8203 l
57.2128 79.6875 l
77.6443 85.5447 l
78.5666 79.3214 78.7135 73.6257 77.8382 67.2246 c
76.6474 58.5161 74.9121 56.0506 70.8374 43.9347 c
20.5352 43.9347 l
20.5352 35.433 l
67.295 35.433 l
61.7763 26.1802 53.5086 19.2619 43.5067 18.3887 c
26.4073 16.8961 22.8996 22.1657 0.7537 21.4031 c
-12.7807 20.937 -18.4169 17.883 -26.3085 17.1257 C
f
U
u
758.268 0 m
758.268 595.2756 L
-92.1257 595.2756 L
-92.1257 0 L
758.268 0 L
n
333.0711 297.6378 m
N
U
u
0 O
0 g
92.7915 51.3799 m
96.856 57.3411 108.4933 59.7963 116.5322 59.389 c
145.5441 57.9192 168.7885 57.8032 197.5324 56.1294 c
218.7662 54.8931 243.7489 53.1322 262.1042 51.7729 c
282.1834 50.2861 365.6895 46.8586 389.8116 44.2397 c
405.8364 42.4999 415.5835 39.317 420.8751 31.3986 c
423.9825 26.7489 427.1426 25.8041 433.0823 23.7027 c
441.0134 20.8969 439.3674 6.9135 429.9374 6.8792 c
387.77 6.7262 279.803 10.2536 260.0385 11.1231 c
234.3356 12.2537 159.8206 12.5065 130.3359 14.1425 c
118.4989 14.7995 100.9402 17.2756 98.1943 25.809 C
126.5319 25.5131 L
126.6208 34.0144 L
93.3241 34.3621 L
93.2665 39.2518 87.0334 42.9352 92.7915 51.3799 c
f
U
u
212.6211 154.971 m
218.1611 159.5931 230.0262 158.7718 237.6471 156.1813 c
265.1507 146.8324 287.477 140.3631 314.6671 130.8913 c
334.753 123.8944 358.3015 115.3675 375.5851 109.0396 c
394.4919 102.1176 473.8763 75.9807 496.3623 66.864 c
511.3002 60.8075 519.805 55.08 522.729 46.0162 c
524.4462 40.6939 527.2274 38.9208 532.3658 35.275 c
539.2271 30.4069 533.8192 17.4069 524.7394 19.9531 c
484.1381 31.3393 381.2529 64.2627 362.4798 70.5049 c
338.0663 78.6225 266.4619 99.2465 238.5489 108.8846 c
227.343 112.7541 211.1311 119.9383 210.8239 128.8974 C
238 120.862 L
240.4107 129.0149 L
208.4788 138.4564 L
209.7608 143.1754 204.7728 148.4232 212.6211 154.971 c
f
U
u
172.4314 313.1655 m
163.5752 315.2862 155.8001 324.3883 156.2203 331.4728 c
169.6815 331.4728 l
169.6815 339.9745 l
149.1355 339.9745 l
143.4491 347.9743 128.9948 356.8102 123.2897 366.5275 c
111.541 386.5382 115.9338 417.2346 135.278 433.2418 c
161.9029 455.2738 202.9058 451.1259 224.0266 443.3642 c
252.7853 432.7957 267.4851 411.3432 273.1342 389.4665 c
253.6476 383.8601 l
255.9527 375.7273 l
276.3842 381.5845 l
277.3065 375.3612 277.4534 369.6655 276.5781 363.2644 c
275.3873 354.5559 273.652 352.0904 269.5773 339.9745 c
219.2751 339.9745 l
219.2751 331.4728 l
266.0349 331.4728 l
260.5162 322.22 252.2485 315.3017 242.2466 314.4285 c
225.1472 312.9359 221.6395 318.2055 199.4936 317.4429 c
185.9592 316.9768 180.323 313.9228 172.4314 313.1655 C
f
U
u
178.4485 284.5152 m
192.0557 288.5733 194.1356 278.8103 194.7362 274.3521 C
189.6019 275.8613 185.9317 277.6417 180.5637 274.5122 C
153.9899 283.003 148.0467 288.0705 135.6307 296.7458 C
133.6461 297.6076 131.618 295.1303 129.25 293.5062 C
114.361 314.6585 87.8183 356.7562 72.8243 364.4751 C
71.1104 364.7681 67.3672 361.8612 64.0932 359.7477 C
55.3963 408.1263 47.9279 455.2143 41.5652 501.1718 c
40.5173 508.7415 35.8124 534.2307 33.5998 546.3114 C
33.3769 549.8339 33.2322 550.8921 32.927 553.0269 C
31.7995 554.9123 29.9748 555.0396 29.17 552.6576 C
21.3245 535.3946 15.5473 519.7589 10.8489 506.4592 c
7.7825 497.7799 -0.8184 478.6714 -4.1449 469.7024 c
-11.1256 450.8812 -20.8032 435.8631 -45.2022 437.7169 c
-52.2764 438.2545 -60.7505 440.7963 -61.1808 450.1294 c
-46.3941 449.9624 l
-46.298 458.4663 l
-61.7243 458.6406 l
-61.4425 468.0632 -53.038 472.8342 -45.1008 472.2755 c
-34.3517 471.5188 -32.9199 465.2734 -31.8819 462.543 c
-24.2372 472.6891 -21.909 477.7082 v
-16.6959 488.947 -11.4742 498.4158 -7.8204 507.2969 c
2.7971 533.1038 11.5001 551.0067 18.8466 567.3298 C
21.7595 573.8925 26.8101 578.3358 32.6534 577.7203 C
39.798 577.189 42.7471 572.6552 43.2912 568.1688 c
45.1517 552.8294 50.7721 530.5615 53.5895 515.1058 c
60.2868 478.3674 68.579 424.8524 79.0275 380.3806 C
85.917 366.1521 118.4917 328.2812 137.2078 307.4173 C
149.1484 297.0587 158.0914 291.9573 178.4485 284.5152 C
f
U
u
161.9425 172.6713 m
175.5497 176.7294 177.6296 166.9663 178.2302 162.5082 C
173.096 164.0174 169.4258 165.7978 164.0578 162.6683 C
137.484 171.1591 131.5408 176.2266 119.1248 184.9019 C
117.1401 185.7637 115.112 183.2864 112.744 181.6622 C
97.8551 202.8146 71.3123 244.9123 56.3183 252.6312 C
54.6044 252.9242 50.8612 250.0173 47.5873 247.9038 C
38.8903 296.2824 31.4219 343.3703 25.0592 389.3279 c
24.0113 396.8976 19.3064 422.3868 17.0938 434.4675 C
16.8709 437.99 16.7263 439.0482 16.421 441.183 C
15.2936 443.0684 13.4689 443.1956 12.664 440.8137 C
4.8185 423.5507 -0.9586 407.915 -5.6571 394.6153 c
-8.7234 385.9359 -17.3243 366.8275 -20.6508 357.8585 c
-27.6316 339.0373 -37.3092 324.0192 -61.7081 325.873 c
-68.7824 326.4106 -77.2564 328.9524 -77.6868 338.2855 c
-62.9001 338.1184 l
-62.804 346.6223 l
-78.2303 346.7967 l
-77.9484 356.2193 -69.544 360.9903 -61.6068 360.4316 c
-50.8577 359.6749 -49.4259 353.4294 -48.3879 350.6991 c
-40.7432 360.8452 -38.415 365.8643 v
-33.2019 377.1031 -27.9802 386.5719 -24.3264 395.453 c
-13.7088 421.2599 -5.0058 439.1628 2.3407 455.4859 C
5.2535 462.0486 10.3041 466.4918 16.1475 465.8764 C
23.2921 465.345 26.2411 460.8113 26.7852 456.3249 c
28.6458 440.9855 34.2661 418.7176 37.0836 403.2619 c
43.7808 366.5235 52.0731 313.0085 62.5215 268.5367 C
69.4111 254.3082 101.9857 216.4373 120.7018 195.5734 C
132.6424 185.2148 141.5854 180.1134 161.9425 172.6713 C
f
U
u
152.9425 75.6713 m
166.5497 79.7294 168.6296 69.9663 169.2302 65.5082 C
164.096 67.0174 160.4258 68.7978 155.0578 65.6683 C
128.484 74.1591 122.5408 79.2266 110.1248 87.9019 C
108.1401 88.7637 106.1121 86.2864 103.744 84.6622 C
88.8551 105.8146 62.3123 147.9123 47.3184 155.6312 C
45.6044 155.9242 41.8613 153.0173 38.5873 150.9038 C
29.8903 199.2824 22.4219 246.3703 16.0592 292.3279 c
15.0113 299.8976 10.3064 325.3868 8.0938 337.4675 C
7.8709 340.99 7.7263 342.0482 7.421 344.183 C
6.2936 346.0684 4.4689 346.1956 3.664 343.8137 C
-4.1815 326.5507 -9.9586 310.915 -14.6571 297.6153 c
-17.7234 288.9359 -26.3243 269.8275 -29.6508 260.8585 c
-36.6316 242.0373 -46.3092 227.0192 -70.7081 228.873 c
-77.7824 229.4106 -86.2564 231.9524 -86.6867 241.2855 c
-71.9001 241.1184 l
-71.804 249.6223 l
-87.2303 249.7967 l
-86.9484 259.2193 -78.544 263.9903 -70.6068 263.4316 c
-59.8577 262.6749 -58.4258 256.4294 -57.3879 253.6991 c
-49.7432 263.8452 -47.4149 268.8643 v
-42.2019 280.1031 -36.9802 289.5719 -33.3264 298.453 c
-22.7088 324.2599 -14.0058 342.1628 -6.6593 358.4859 C
-3.7465 365.0486 1.3041 369.4918 7.1475 368.8764 C
14.2921 368.345 17.2411 363.8113 17.7852 359.3249 c
19.6458 343.9855 25.2661 321.7176 28.0836 306.2619 c
34.7808 269.5235 43.0731 216.0085 53.5215 171.5367 C
60.4111 157.3082 92.9857 119.4373 111.7019 98.5734 C
123.6424 88.2148 132.5855 83.1134 152.9425 75.6713 C
f
U
u
667.6955 281.0932 m
681.3027 285.1513 683.3826 275.3883 683.9832 270.9301 C
678.849 272.4393 675.1788 274.2197 669.8108 271.0903 C
643.2369 279.581 637.2938 284.6485 624.8778 293.3238 C
622.8931 294.1856 620.865 291.7083 618.497 290.0842 C
603.6081 311.2365 577.0653 353.3342 562.0713 361.0531 C
560.3574 361.3461 556.6142 358.4393 553.3403 356.3257 C
544.6433 404.7044 537.1749 451.7923 530.8122 497.7498 c
529.7643 505.3195 525.0594 530.8087 522.8468 542.8894 C
522.6239 546.4119 522.4793 547.4701 522.174 549.605 C
521.0466 551.4904 519.2218 551.6176 518.417 549.2356 C
510.5715 531.9727 504.7943 516.3369 500.0959 503.0373 c
497.0296 494.3579 488.4287 475.2495 485.1021 466.2804 c
478.1214 447.4592 468.4438 432.4411 444.0448 434.2949 c
436.9706 434.8325 428.4965 437.3743 428.0662 446.7075 c
442.8529 446.5404 l
442.949 455.0443 l
427.5227 455.2186 l
427.8046 464.6412 436.209 469.4122 444.1462 468.8535 c
454.8953 468.0969 456.3271 461.8514 457.3651 459.121 c
465.0098 469.2671 467.338 474.2863 v
472.5511 485.525 477.7728 494.9939 481.4266 503.8749 c
492.0442 529.6818 500.7472 547.5847 508.0937 563.9078 C
511.0065 570.4705 516.0571 574.9138 521.9004 574.2983 C
529.0451 573.767 531.9941 569.2332 532.5382 564.7469 c
534.3988 549.4075 540.0191 527.1395 542.8366 511.6838 c
549.5338 474.9454 557.8261 421.4304 568.2745 376.9586 C
575.1641 362.7301 607.7387 324.8592 626.4548 303.9953 C
638.3954 293.6367 647.3384 288.5354 667.6955 281.0932 C
f
U
u
651.1895 169.2493 m
664.7967 173.3074 666.8766 163.5444 667.4772 159.0862 C
662.343 160.5954 658.6728 162.3758 653.3048 159.2463 C
626.731 167.7371 620.7878 172.8046 608.3718 181.4799 C
606.3871 182.3417 604.3591 179.8644 601.991 178.2403 C
587.1021 199.3926 560.5593 241.4903 545.5654 249.2092 C
543.8514 249.5022 540.1083 246.5953 536.8343 244.4818 C
528.1374 292.8604 520.6689 339.9484 514.3063 385.9059 c
513.2583 393.4756 508.5534 418.9648 506.3408 431.0455 C
506.1179 434.568 505.9733 435.6262 505.668 437.761 C
504.5406 439.6464 502.7159 439.7737 501.9111 437.3917 C
494.0655 420.1287 488.2884 404.493 483.5899 391.1933 c
480.5236 382.514 471.9227 363.4055 468.5962 354.4365 c
461.6154 335.6153 451.9378 320.5972 427.5389 322.451 c
420.4646 322.9886 411.9906 325.5304 411.5603 334.8635 c
426.347 334.6965 l
426.443 343.2004 l
411.0167 343.3747 l
411.2986 352.7973 419.703 357.5683 427.6402 357.0096 c
438.3893 356.2529 439.8212 350.0075 440.8591 347.2771 c
448.5038 357.4232 450.8321 362.4423 v
456.0451 373.6811 461.2668 383.1499 464.9206 392.031 c
475.5382 417.8379 484.2412 435.7408 491.5877 452.0639 C
494.5005 458.6266 499.5511 463.0699 505.3945 462.4544 C
512.5391 461.9231 515.4881 457.3893 516.0323 452.9029 c
517.8928 437.5635 523.5131 415.2956 526.3306 399.8399 c
533.0279 363.1015 541.3201 309.5865 551.7685 265.1147 C
558.6581 250.8862 591.2327 213.0153 609.9489 192.1514 C
621.8894 181.7928 630.8325 176.6914 651.1895 169.2493 C
f
U
u
642.1895 72.2493 m
655.7968 76.3074 657.8766 66.5444 658.4773 62.0862 C
653.343 63.5954 649.6728 65.3758 644.3048 62.2463 C
617.731 70.7371 611.7878 75.8046 599.3718 84.4799 C
597.3872 85.3417 595.3591 82.8644 592.991 81.2403 C
578.1021 102.3926 551.5593 144.4903 536.5654 152.2092 C
534.8515 152.5022 531.1083 149.5953 527.8343 147.4818 C
519.1374 195.8604 511.6689 242.9484 505.3063 288.9059 c
504.2584 296.4756 499.5534 321.9648 497.3409 334.0455 C
497.118 337.568 496.9733 338.6262 496.6681 340.761 C
495.5406 342.6464 493.7159 342.7737 492.9111 340.3917 C
485.0656 323.1287 479.2884 307.493 474.5899 294.1933 c
471.5236 285.514 462.9227 266.4055 459.5962 257.4365 c
452.6154 238.6153 442.9379 223.5972 418.5389 225.451 c
411.4647 225.9886 402.9906 228.5304 402.5603 237.8635 c
417.347 237.6965 l
417.4431 246.2004 l
402.0168 246.3747 l
402.2986 255.7973 410.703 260.5683 418.6402 260.0096 c
429.3893 259.2529 430.8212 253.0075 431.8591 250.2771 c
439.5038 260.4232 441.8321 265.4423 v
447.0451 276.6811 452.2668 286.1499 455.9206 295.031 c
466.5382 320.8379 475.2412 338.7408 482.5877 355.0639 C
485.5005 361.6266 490.5511 366.0699 496.3945 365.4544 C
503.5391 364.9231 506.4881 360.3893 507.0323 355.9029 c
508.8928 340.5635 514.5132 318.2956 517.3306 302.8399 c
524.0279 266.1015 532.3201 212.5865 542.7685 168.1147 C
549.6581 153.8862 582.2327 116.0153 600.9489 95.1514 C
612.8895 84.7928 621.8325 79.6914 642.1895 72.2493 C
f
U
u
281.8444 300.0883 m
303.2212 262.5281 l
295.8323 258.3228 l
274.105 296.4988 l
257.2874 287.6297 247.6636 264.4922 263.6465 237.8019 c
276.0703 217.0549 294.6723 198.3113 312.9743 181.8519 c
341.1605 156.5031 371.884 135.1712 407.4629 117.5865 c
427.3936 107.7355 472.0498 91.3755 497.9881 89.6556 c
516.0961 88.4547 544.5411 88.6733 558.8171 102.0381 C
547.2301 115.3202 509.0218 127.8855 487.565 135.3486 c
463.1548 143.8389 426.4834 168.8637 412.7271 179.4851 c
397.4722 191.2637 345.1069 231.1846 324.1558 268.8221 c
316.6993 282.2172 299.027 306.204 281.8444 300.0883 c
f
U
u
375.4206 510.7208 m
380.4463 505.8556 397.3246 499.1622 402.2884 492.151 c
404.5947 488.8935 404.437 482.7218 y
393.8537 466.7859 333.6565 418.8456 298.2286 400.154 C
330.3584 406.7529 L
360.2412 426.4782 416.4531 473.9885 416.4957 481.505 C
417.5972 488.0843 413.5195 496.6761 399.468 504.7869 c
388.1272 511.3332 382.2719 518.3457 y
392.4239 525.0054 400.705 539.8407 400.5914 548.1791 c
373.6692 548.0796 l
373.6379 556.5814 l
396.3093 556.6652 l
389.6287 567.1228 375.3007 575.2797 362.3588 576.5945 c
344.7993 578.3788 329.4455 573.8134 320.1909 564.345 c
330.017 560.2973 l
326.779 552.4363 l
314.9875 557.2936 l
313.8409 555.4624 313.1913 554.1932 312.5264 552.1934 c
307.6691 537.5871 310.9034 527.8936 322.299 518.0375 c
331.0457 510.4723 339.7942 515.9342 347.1487 509.1368 c
353.5572 503.2137 366.3505 506.9994 375.4206 510.7208 C
f
U
u
215.0743 188.2832 m
223.4777 188.2832 l
224.8522 177.9756 219.0397 174.3961 212.7897 175.1506 C
190.5397 142.8963 162.5397 136.8963 146.1835 132.8277 c
143.1074 132.0625 133.5397 128.8963 121.7897 130.6507 C
141.0397 137.4007 190.0397 146.4006 205.7897 177.6506 C
203.5397 179.4006 203.2553 181.7201 202.9237 184.1208 c
202.5397 186.9006 203.5397 188.4006 205.1677 190.184 c
205.1677 196.6128 l
203.5397 198.3961 202.5397 199.8961 202.9237 202.6761 c
203.2553 205.0767 203.5397 207.3961 205.7897 209.1461 C
189.5397 239.8963 143.5397 250.8963 121.7897 255.1461 C
128.5397 258.8963 141.3872 256.4 150.1835 253.9691 c
168.5397 248.8963 194.5397 239.8963 212.7897 211.6461 C
217.6273 213.8612 225.9772 208.1046 223.5586 196.785 c
215.0928 196.785 L
215.0743 188.2832 L
f
U
u
154.1445 460.0988 m
150.9482 473.9031 l
159.2308 475.8208 l
162.427 462.0166 l
170.9212 462.9429 172.1311 471.5819 171.2886 479.74 c
169.906 493.1295 168.8423 500.9098 182.8325 504.3373 c
186.7135 505.2881 191.8636 497.8498 197.7661 494.8572 c
207.2739 490.0366 214.7908 491.4485 227.2866 493.2417 c
245.2151 495.8147 260.4541 499.0237 262.879 500.1256 c
272.001 504.2702 280.1185 505.3359 281.4374 512.9933 C
224.7616 513.5126 L
224.8395 522.014 L
281.5152 521.4946 l
279.2535 528.5878 271.6158 531.4258 262.2843 534.6652 c
259.8993 535.4929 247.705 537.9761 230.9178 541.9775 c
216.4242 545.4322 206.9251 545.5436 198.8186 541.9419 c
192.7708 539.2548 187.6368 532.3628 183.6668 532.8148 c
169.7352 534.4012 170.5007 543.8285 172.1972 557.182 c
173.3625 566.3539 172.4467 573.8455 163.5016 575.5491 c
159.7251 561.8921 l
151.5309 564.1581 l
155.3074 577.8151 l
149.096 579.3445 144.7095 575.644 141.7883 571.2824 c
140.0698 568.7169 139.4604 566.3903 136.8289 564.2902 c
132.6011 560.9163 128.6647 561.683 125.6126 564.4929 c
122.9804 566.916 121.8115 571.7806 118.7891 574.0333 c
115.0239 576.8397 115.5922 577.5917 111.3416 577.6416 c
111.1754 563.473 l
102.6743 563.5728 l
102.8406 577.7413 l
91.4376 577.7519 90.2869 565.873 90.5891 558.7262 c
90.4555 547.3346 l
123.7359 547.0298 l
123.6361 538.5287 l
90.3403 538.9194 l
89.8832 499.9561 l
123.1791 499.5656 l
123.0793 491.0645 l
89.7835 491.4551 l
89.6667 480.111 l
89.2236 473.375 90.0431 461.6221 101.4692 460.8516 c
101.6355 475.0201 l
110.1365 474.9204 l
109.9703 460.752 l
112.4607 461.1845 113.8717 462.0459 116.0965 463.6364 c
119.65 466.1769 120.1617 469.7654 123.9656 472.0015 c
128.4398 474.6314 133.3861 475.9303 136.468 471.371 c
138.5156 468.3421 138.5087 468.8574 141.1862 465.7728 c
144.194 462.3078 147.4223 459.1484 154.1445 460.0988 c
f
U
u
389.0182 366.0866 m
373.4319 366.1309 l
373.4077 357.6293 l
388.994 357.5851 l
388.8791 317.2025 l
373.293 317.2468 l
373.2688 308.7452 l
388.8549 308.701 l
388.8253 298.2353 l
389.222 290.4874 386.7368 279.9469 373.6158 279.2126 c
375.9483 293.1888 l
367.5625 294.5883 l
365.1134 279.9132 l
357.5703 282.1769 352.5114 288.5944 353.7312 298.9295 c
355.3087 312.2974 368.4454 330.6984 345.0556 326.685 c
341.1174 326.0093 336.3735 320.4431 330.4854 317.4222 c
321.7048 312.9169 313.4677 318.1152 309.4456 320.0137 c
300.3849 324.2909 296.6152 326.0869 295.4082 333.7629 C
325.1638 333.6784 L
325.188 342.1799 L
295.4324 342.2645 l
297.7971 349.3241 299.6703 352.9422 309.0479 356.045 c
313.2706 357.4422 321.8457 362.5708 330.6006 358.0156 c
336.4716 354.9613 341.1837 349.3682 345.1181 348.6702 c
368.4846 344.5239 355.4527 362.9994 353.951 376.376 c
352.6983 387.5365 356.3806 393.7957 365.4173 395.5174 c
367.7664 380.8261 l
376.1615 382.1684 l
373.9241 396.1602 l
388.319 397.0673 389.5005 384.7998 389.0486 376.8552 c
389.0182 366.0866 l
f
U
%%PageTrailer
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec

Adobe_customcolor /terminate get exec

Adobe_cshow /terminate get exec

Adobe_cmykcolor /terminate get exec

Adobe_packedarray /terminate get exec

%%EOF
